using System;
using System.IO;
using System.Linq;
using System.Text.RegularExpressions;
using Microsoft.Build.Framework;
using Microsoft.Build.Utilities;

namespace Neo.BuildTasks
{
    public class NeoContractInterface : Task
    {
        public override bool Execute()
        {
            if (string.IsNullOrEmpty(ManifestFile))
            {
                Log.LogError("Invalid ManifestFile " + ManifestFile);
            }
            else
            {
                var manifest = NeoManifest.Load(ManifestFile);
                var source = GenerateContractInterface(manifest, RootNamespace);
                if (!string.IsNullOrEmpty(source))
                {
                    Directory.CreateDirectory(Path.GetDirectoryName(this.OutputFile));
                    FileOperationWithRetry(() => File.WriteAllText(this.OutputFile, source));
                }
            }
            return !Log.HasLoggedErrors;
        }

        [Required]
        public string OutputFile { get; set; } = "";

        [Required]
        public string ManifestFile { get; set; } = "";

        public string RootNamespace { get; set; } = "";

        static string GenerateContractInterface(NeoManifest manifest, string @namespace = "")
        {
            var contractName = Regex.Replace(manifest.Name, "^.*\\.", string.Empty);

            var builder = new IndentedStringBuilder();

            builder.AppendLines($@"//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

");


            if (@namespace.Length > 0)
            {
                builder.AppendLine($"namespace {@namespace} {{");
                builder.IncrementIndent();
            }
            builder.AppendLines($@"#if NETSTANDARD || NETFRAMEWORK || NETCOREAPP
[System.CodeDom.Compiler.GeneratedCode(""Neo.BuildTasks"",""{ThisAssembly.AssemblyFileVersion}"")]
#endif
");
            builder.AppendLine($"[NeoTestHarness.Contract(\"{manifest.Name}\")]");
            builder.AppendLine($"interface {contractName} {{");
            builder.IncrementIndent();
            for (int i = 0; i < manifest.Methods.Count; i++)
            {
                var method = manifest.Methods[i];
                if (method.Name.StartsWith("_")) continue;

                builder.Append($"{ToDotNetType(method.ReturnType)} {method.Name}(");
                builder.Append(string.Join(", ", method.Parameters.Select(p => $"{ToDotNetType(p.Type)} {p.Name}")));
                builder.AppendLine(");");
            }

            if (manifest.Events.Count > 0)
            {
                builder.AppendLine("interface Events {");
                builder.IncrementIndent();
                for (int i = 0; i < manifest.Events.Count; i++)
                {
                    var @event = manifest.Events[i];
                    builder.Append($"void {@event.Name}(");
                    builder.Append(string.Join(", ", @event.Parameters.Select(p => $"{ToDotNetType(p.Type)} {p.Name}")));
                    builder.AppendLine($");");
                }
                builder.DecrementIndent();
                builder.AppendLine("}");
            }

            builder.DecrementIndent();
            builder.AppendLine("}");

            if (@namespace.Length > 0)
            {
                builder.DecrementIndent();
                builder.AppendLine("}");
            }

            return builder.ToString();

            static string ToDotNetType(string paramType) => paramType switch
            {
                "Any" => "object",
                "Array" => "object[]",
                "Boolean" => "bool",
                "ByteArray" => "byte[]",
                "Hash160" => "Neo.UInt160",
                "Hash256" => "Neo.UInt256",
                "Integer" => "System.Numerics.BigInteger",
                "PublicKey" => "Neo.Cryptography.ECC.ECPoint",
                "String" => "string",
                "Void" => "void",
                _ => throw new NotImplementedException(),
            };
        }

        static void FileOperationWithRetry(Action operation)
        {
            const int ProcessCannotAccessFileHR = unchecked((int)0x80070020);

            for (int retriesLeft = 6; retriesLeft > 0; retriesLeft--)
            {
                try
                {
                    operation();
                }
                catch (IOException ex) when (ex.HResult == ProcessCannotAccessFileHR && retriesLeft > 0)
                {
                    System.Threading.Tasks.Task.Delay(100).Wait();
                    continue;
                }
            }
        }
    }
}
